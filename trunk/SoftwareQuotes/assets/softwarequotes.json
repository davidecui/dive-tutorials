[
["Abelson and Sussman","G. Sussman","In engineering, as in other creative arts, we must learn to do analysis to support our efforts in synthesis. One cannot build a beautiful and functional bridge without a knowledge of steel and dirt, and a considerable mathematical technique for using this knowledge to compute the properties of structures. Similarly, one cannot build a beautiful computer system without a deep understanding of how to \"previsualize\" the process generated by the code one writes."],
["Abelson and Sussman","SICP (section 2.2.4)","We have also obtained a glimpse of another crucial idea about languages and program design. This is the approach of stratified design, the notion that a complex system should be structured as a sequence of levels that are described using a sequence of languages. Each level is constructed by combining parts that are regarded as primitive at that level, and the parts constructed at each level are used as primitives at the next level. The language used at each level of a stratified design has primitives, means of combination, and means of abstraction appropriate to that level of detail."],
["Abelson and Sussman","","Programs must be written for people to read, and only incidentally for machines to execute."],
["Douglas Adams","","I love deadlines. I like the whooshing sound they make as they fly by."],
["Douglas Adams","From wikiquotes.org","The idea that Bill Gates has appeared like a knight in shining armour to lead all customers out of a mire of technological chaos neatly ignores the fact that it was he who, by peddling second-rate technology, led them into it in the first place."],
["Douglas Adams","From Last Chance to See","I am rarely happier than when spending entire day programming my computer to perform automatically a task that it would otherwise take me a good ten seconds to do by hand"],
["Scott Adams","","Time is so short, you can't make a debug..."],
["Scott Adams","From The Dilbert Principle, Chapter 14: Engineers, Scientists, Programmers, and Other Odd People","No engineer looks at a television remote control without wondering what it would take to turn it into a stun gun. No engineer can take a shower without wondering if some sort of Teflon coating would make showering unnecessary. To the engineer, the world is a toy box full of suboptimized and feature-poor toys."],
["Scott Adams","From The Dilbert Principle, Chapter 14: Engineers, Scientists, Programmers, and Other Odd People","To the engineer, all matter in the universe can be placed into one of two categories: (1) things that need to be fixed, and (2) things that will need to be fixed after you've had a few minutes to play with them. If there are no problems handily available, they will create their own problems. Normal people don't understand this concept; they believe that if it ain't broke, don't fix it. Engineers believe that if it ain't broke, it doesn't have enough features yet."],
["Scott Adams","","Normal people believe that if it ain't broke, don't fix it. Engineers believe that if it ain't broke, it doesn't have enough features yet."],
["Scott Adams","Found on an web quotes site","If you have any trouble sounding condescending, find a Unix user to show you how it's done."],
["Bilal Ahsan","Reciprocating is the metrics to success","Customers and Developers Reciprocate each other, Coding and Modelling Reciprocate each other; Software Production essentially requires all including a real metrics to success:- 'Reciprocating'."],
["Bilal Ahsan","","An Elegent and more thoughtfully designed function is compact and cryptic "],
["Bilal Ahsan","","So who had invented the lines-of-code measuring metric? eighther financial or statistical mathematitians who write code, keep it, protect it and refuse to share"],
["Bilal Ahsan","","Lines of Code is not a measure of effort It is the measure of Tape Archives used in 1968"],
["Bilal Ahsan","","If your Boss can't say No to His Boss, Change the Job."],
["Christopher Alexander","","It is possible to make buildings by stringing together patterns, in a rather loose way. A building made like this, is an assembly of patterns. It is not dense. It is not profound. But it is also possible to put patterns together in such a way that many patterns overlap in the same physical space: the building is very dense; it has many meanings captured in a small space; and through this density, it becomes profound."],
["Christopher Alexander","","Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice."],
["Jeremy S. Anderson","","There are two major products that come out of Berkeley: LSD and UNIX. We don't believe this to be a coincidence."],
["Poul Anderson","","I have yet to see any problem, however complicated, which, when looked at in the right way, did not become still more complicated."],
["A. Hunt and D. Thomas","The Pragmatic Programmer: From Journeyman to Master by Andrew Hunt, David Thomas, Ward Cunningham (Preface) , ISBN: 020161622X","Some things are better done than described....Here's a challenge for you. Write a short description that tells someone how to tie bows in their shoelaces. Go on, try it!"],
["A. Hunt and D. Thomas","The Pragmatic Programmer: From Journeyman to Master by Andrew Hunt, David Thomas, Ward Cunningham (Preface) , ISBN: 020161622X","We feel that the only way to develop software reliably, and to make our developments easier to understand and maintain, is to follow what we call the DRY principle: Every piece of knowledge must have a single, unambiguous, authoritative representation within a system. Why do we call it DRY? DRY - Don't Repeat Yourself. The alternative is to have the same thing expressed in two or more places. If you change one, you have to remember to change the others...It isn't a question of whether you'll remember: it's a question of when you will forget."],
["A. Hunt and D. Thomas","A. Hunt and D. Thomas , The Pragmatic Programmer: From Journeyman to Master by Andrew Hunt, David Thomas, Ward Cunningham (Preface) , ISBN: 020161622X","Requirements are not architecture. Requirements are not design, nor are they the user interface. Requirements are need."],
["A. Hunt and D. Thomas","in IEEE Software magazine's \"Software Construction\" column by Andy Hunt and Dave Thomas","The art of programming lies in that nether region between the hopeful wishes of an elegant architecture and the hard grindstone of technical details."],
["I. O. Angell","","Today, most software exists, not to solve a problem, but to interface with other software."],
["Mark Ardis","","One Page Principle A specification, design, procedure, test plan that will not fit on one page of 8.5-by-11 inch paper cannot be understood."],
["Aristotle","As quoted in Microsoft Bookshelf.","What we have to learn to do, we learn by doing."],
["Aristotle","As quoted in Rapid Development, chapter 8, page 167","It is the mark of an instructed mind to rest satisfied with the degree of precision which the nature of the subject admits, and not to seek exactness when only an approximation of the truth is possible."],
["Aristotle","As quoted in Rapid Development, chapter 8, page 167","It is the mark of an instructed mind to rest satisfied with the degree of precision which the nature of the subject admits, and not to seek exactness when only an approximation of the truth is possible."],
["Joe Armstrong","Coders at Work","I don't think a program is finished until you've written some reasonable documentation... I think it's unprofessional these people who say, 'What does it do? Read the code.' The code shows me what it does. It doesn't show me what it's supposed to do."],
["Joe Armstrong","Coders at Work","I think the lack of reusability comes in object-oriented languages, not in functional languages. Because the problem with object-oriented languages is they've got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle."],
["Joe Armstrong","Coders at Work","The funny thing is, if you give two programmers the same problem-- it depends on the problem, but problems of a more mathematical nature, they can often end up writing the same code... Are we creating these things or are we just pulling the cobwebs off?"],
["Isaac Asimov","","I do not fear computers, I fear the lack of them."],
["Isaac Asimov","","The most exciting phrase to hear in science, the one that heralds new discoveries, is not 'Eureka!', but 'That's funny...' "],
["Isaac Asimov","Nightfall and Other Stories","Working ten hour days allows you to fall behind twice as fast as you could working five hour days. "],
["Jeff Atwood","","We have to stop optimizing for programmers and start optimizing for users."],
["Jeff Atwood","","Code doesn't exist until it's checked into source control."],
["Jeff Atwood","","No one hates software more than software developers."],
["Jeff Atwood","","Software: do you write it like a book, grow it like a plant, accrete it like a pearl, or construct it like a building?"],
["Jeff Atwood","","Piracy is a natural state of affairs for users with lots of time and no money."],
["Jeff Atwood","","Nobody hates software more than software developers."],
["James Bach","","Everything really interesting that happens in software projects eventually comes down to people."],
["James Bach","","But there´s more to defining processes and coordinating people than assigning someone to dream up a checklist and get it blessed in a staff meeting."],
["James Bach","","... our basic ideas about what are better or worse practices are strongly influenced by people we perceive as knowing how to make software."],
["James Bach","","It´s more about good enough than it is about right or wrong."],
["Kent Beck","","Optimism is an occupational hazard of programming: feedback is the treament."],
["Kent Beck","Extreme Programming Explained","..the problem [with software projects] isn't change, per se, because change is going to happen; the problem, rather, is the inability to cope with change when it comes."],
["Kent Beck","","Make it work, make it right, make it fast."],
["Kent Beck","Programming as a garden: Permaprogramming (talk)","Planning is alWork when you’re fresh; stop when you’re tired."],
["Kent Beck","Programming as a garden: Permaprogramming (talk)","Planning is also design."],
["Joshua Bloch","from the book Coders at Work","We love brainteasers. But we have to temper this love with the knowledge that we're solving real problems for real people. And if we don't do that we are, essentially, whacking off."],
["Joshua Bloch","from the book Coders at Work","I tend not to buy into religions, any religions, whole hog. Whether it's object-oriented programming or functional programming or Christianity or Judaism-- I mine them for good ideas but I don't practice them in toto."],
["Barry Boehm","","Fix specification errors early. To fix later, they will cost:\n* 500% more at design stage\n* 1,000% more at coding\n* 2,000% more at unit test\n* 20,000% more at delivery"],
["Barry Boehm","","If a project has not achieved a system architecture, including its rationale, the project should not proceed to full-scale system development. Specifying the architecture as a deliverable enables its use throughout the development and maintenance process."],
["Barry Boehm","","Poor management can increase software costs more rapidly than any other factor."],
["Barry Boehm","","Agile methods derive much of their agility by relying on the tacit knowledge embodied in the team, rather than writing the knowleadge down in plans."],
["Grady Booch","","A fool with a tool is still a fool."],
["Grady Booch","","The amateur software engineer is always in search of magic."],
["Grady Booch","on the versatility of UML","UML is not dessert topping and floor wax."],
["Grady Booch","on the versatility of UML","UML is not dessert topping and floor wax."],
["John Carmack","","... the cost of adding a feature isn't just the time it takes to code it. The cost also includes the addition of an obstacle to future expansion. ... The trick is to pick the features that don't fight each other."],
["John Carmack","","If you want to set off and go develop some grand new thing, you don't need millions of dollars of capitalization. You need enough pizza and Diet Coke to stick in your refrigerator, a cheap PC to work on and the dedication to go through with it."],
["John Carmack","on software patents","The idea that I can be presented with a problem, set out to logically solve it with the tools at hand, and wind up with a program that could not be legally used because someone else followed the same logical steps some years ago and filed for a patent on it is horrifying."],
["Bill Clinton","","Considering the current sad state of our computer programs, software development is clearly still a black art, and cannot yet be called an engineering discipline."],
["Alistair Cockburn","Agile Software Development","We are still in the infancy of naming what is really happening on software development projects."],
["Tom DeMarco","Software Metrics: A Rigorous and Practical Approach","You cannot control what you cannot measure."],
["Tom DeMarco","Controlling Software Projects","You can't manage what you can't control, and you can't control what you don't measure."],
["Tom DeMarco","","Voluminous documentation is part of the problem, not part of the solution."],
["Galileo Galilei","As quoted in Software Metrics: A Rigorous and Practical Approach","What is not measurable, make measurable."],
["Erich Gamma","Design Patterns","encapsulate the concept that varies"],
["Erich Gamma","Design Patterns","The best designers will use many design patterns that dovetail and intertwine to produce a greater whole."],
["Steve Jobs","","I'm hoping our software strategies are boring to you, because they're not changing every year, ... That is our strategy."],
["Steve Jobs","","Innovation distinguishes between a leader and a follower."],
["Steve Jobs","","By the way, what have you done that’s so great? Do you create anything, or just criticize others work and belittle their motivations?"],
["Steve Jobs","","We know from painful experience that letting a third party layer of software come between the platform and the developer ultimately results in sub-standard apps and hinders the enhancement and progress of the platform. If developers grow dependent on third party development libraries and tools, they can only take advantage of platform enhancements if and when the third party chooses to adopt the new features. We cannot be at the mercy of a third party deciding if and when they will make our enhancements available to our developers."],
["Robert C. Martin","","The design of many software applications begins as a vital image in the minds of its designers. At this stage it is clean, elegant, and compelling. It has a simple beauty that makes the designers and implementers itch to see it working. But then something begins to happen. The software starts to rot, over time, the program worsens in quality, the rotting effect increases, with a little bug here, a little hack there, and the program becomes a festering mass of code that the developers find increasingly hard to maintain."],
["Robert C. Martin","","[The Test of Negation] Don't include a sentence in documentation if its negation is obviously false. "],
["Pablo Picasso","","Computers are useless. They can only give you answers."],
["Karl Popper","","Our knowledge can only be finite, while our ignorance must necessarily be infinite."],
["Linus Torvalds","","Somebody finds the problem, and somebody else understands it. And I'll go on record as saying that finding it is the bigger challenge."],
["Linus Torvalds","","In my opinion, shareware tends to combine the worst of commercial software (no sources) with the worst of free software (no finishing touches). I simply do not believe in the shareware market at all."],
["Linus Torvalds","","C++ is a horrible language. It’s made more horrible by the fact that a lot of substandard programmers use it, to the point where it’s much much easier to generate total and utter crap with it. Quite frankly, even if the choice of C were to do *nothing* but keep the C++ programmers out, that in itself would be a huge reason to use C."],
["Linus Torvalds","","Only wimps use tape backup: real men just upload their important stuff on ftp, and let the rest of the world mirror it."],
["Linus Torvalds","","If you want to travel around the world and be invited to speak at a lot of different places, just write a Unix operating system."],
["Bjarne Stroustrup","","An organisation that treats its programmers as morons will soon have programmers that are willing and able to act like morons only."],
["Bjarne Stroustrup","","The most important single aspect of software development is to be clear about what you are trying to build."],
["Bjarne Stroustrup","","we mean to stop accidents, not sabotage"],
["Bjarne Stroustrup","","There's an old story about the person who wished his computer were as easy to use as his telephone. That wish has come true, since I no longer know how to use my telephone."],
["Bjarne Stroustrup","","Too many managers, getting rid of the arrogant, undisciplined, over-paid, technology-obsessed, improperly-dressed etc. programmers would appear to be a significant added benefit."],
["Bjarne Stroustrup","","There are only two kinds of languages: the kind everybody bitches about, and the kind nobody uses."],
["Bjarne Stroustrup","","Design and programming are human activities; forget that and all is lost."],
["Bjarne Stroustrup","","C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg off."],
["Bjarne Stroustrup","","I have always wished for my computer to be as easy to use as my telephone; my wish has come true because I can no longer figure out how to use my telephone."],
["Edsger Dijkstra","The Tide, not the waves; in Denning/Metcalfe: Beyond Calculation","...Simplifications have had a much greater long-range scientific impact than individual feats of ingenuity. The opportunity for simplification is very encouraging, because in all examples that come to mind the simple and elegant systems tend to be easier and faster to design and get right, more efficient in execution, and much more reliable than the more contrived contraptions that have to be debugged into some degree of acceptability....Simplicity and elegance are unpopular because they require hard work and discipline to achieve and education to be appreciated."],
["Edsger Dijkstra","","The tools we use have a profound (and devious!) influence on our thinking habits, and, therefore, on our thinking abilities."],
["Edsger Dijkstra","Communications of the ACM,",".. while we all know that unmastered complexity is at the root of the misery, we do not know what degree of simplicity can be obtained, nor to what extent the intrinsic complexity of the whole design has to show up in the interfaces. We simply do not know yet the limits of disentanglement. We do not know yet whether intrinsic intricacy can be distinguished from accidental intricacy."],
["Edsger Dijkstra","foreword to Teaching and Learning Formal Methods","So-called \"natural language\" is wonderful for the purposes it was created for, such as to be rude in, to tell jokes in, to cheat or to make love in (and Theorists of Literary Criticism can even be content-free in it), but it is hopelessly inadequate when we have to deal unambiguously with situations of great intricacy, situations which unavoidably arise in such activities as legislation, arbitration, mathematics or programming."],
["Edsger Dijkstra","","There are many different styles of composition. I characterize them always as Mozart versus Beethoven. When Mozart began to write at that time he had the composition ready in his mind. He wrote the manuscript and it was 'aus einem Guss' (casted as one). And it was also written very beautiful. Beethoven was an indecisive and a tinkerer and wrote down before he had the composition ready and plastered parts over to change them. There was a certain place where he plastered over nine times and one did remove that carefully to see what happened and it turned out the last version was the same as the first one."],
["Edsger Dijkstra","","Elegance is not a dispensable luxury but a factor that decides between success and failure."],
["Edsger Dijkstra","","The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offence."],
["Edsger Dijkstra","My hopes of computing science","For me, the first challenge for computing science is to discover how to maintain order in a finite, but very large, discrete universe that is intricately intertwined. And a second, but not less important challenge is how to mould what you have achieved in solving the first problem, into a teachable discipline: it does not suffice to hone your own intellect (that will join you in your grave), you must teach others how to hone theirs. The more you concentrate on these two challenges, the clearer you will see that they are only two sides of the same coin: teaching yourself is discovering what is teachable."],
["Edsger Dijkstra","","Simplicity is prerequisite for reliability."],
["Edsger Dijkstra","1972 Turing award lecture","The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague."],
["Edsger Dijkstra","The Humble Programmer","As long as there were no machines, programming was no problem at all; when we had a few weak computers, programming became a mild problem, and now [1972] that we have gigantic computers, programming has become a gigantic problem. […] As the power of available machines grew by a factor of more than a thousand, society's ambition to apply these new machines grew in proportion, and it was the poor programmer who found his job in this exploded field of tension between the ends and the means. The increased power of the hardware, together with the perhaps more dramatic increase in its reliability, made solutions feasible that the programmer had not dared to dream about a few years before. And now, a few years later, he had to dream about them and even worse, he had to transform such dreams into reality! It is no wonder that we found ourselves in a software crisis"],
["Edsger Dijkstra","How do we tell truths that might hurt?","Projects promoting programming in \"natural language\" are intrinsically doomed to fail."],
["Edsger Dijkstra","1972 Turing award lecture","The program and the correctness proof grow hand in hand."],
["Edsger Dijkstra","","Progress is possible only if we train ourselves to think about programs without thinking of them as pieces of executable code."],
["Edsger Dijkstra","","Software Engineering is Programming when you can’t."],
["Edsger Dijkstra","","It is practically impossible to teach good programming style to students that have had prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration."],
["Edsger Dijkstra","his advice to a promising researcher, who asked how to select a topic for research","Do only what only you can do."],
["Edsger Dijkstra","","If debugging is the process of removing bugs. Then programming must be the process of putting them in."],
["Edsger Dijkstra","","Object-oriented programming is an exceptionally bad idea which could only have originated in California."],
["Edsger Dijkstra","quoted in More Programming Pearls","Program testing can be used to show the presence of bugs, but never to show their absence!"],
["Edsger Dijkstra","","Please don't fall into the trap of believing that I am terribly dogmatical about [the goto statement]. I have the uncomfortable feeling that others are making a religion out of it, as if the conceptual problems of programming could be solved by a single trick, by a simple form of coding discipline!"],
["Edsger Dijkstra","","Write a paper promising salvation, make it a 'structured' something or a 'virtual' something, or 'abstract', 'distributed' or 'higher-order' or 'applicative' and you can almost be certain of having started a new cult."],
["Edsger Dijkstra","","When there were no computers programming was no problem. When we had a few weak computers, it became a mild problem. Now that we have gigantic computers, programming is a gigantic problem."],
["Edsger Dijkstra","Introducing a course on calculi","I mean, if 10 years from now, when you are doing something quick and dirty, you suddenly visualize that I am looking over your shoulders and say to yourself, \"Dijkstra would not have liked this\", well that would be enough immortality for me."],
["Edsger Dijkstra","","If in physics there's something you don't understand, you can always hide behind the uncharted depths of nature. You can always blame God. You didn't make it so complex yourself. But if your program doesn't work, there is no one to hide behind. You cannot hide behind an obstinate nature. If it doesn't work, you've messed up."],
["Edsger Dijkstra","","Besides a mathematical inclination, an exceptionally good mastery of one's native tongue is the most vital asset of a competent programmer."],
["Edsger Dijkstra","","Computer Science is no more about computers than astronomy is about telescopes."],
["Edsger Dijkstra","Trip Reports","John von Neumann draws attention to what seemed to him a contrast. He remarked that for simple mechanisms, it is often easier to describe how they work than what they do, while for more complicated mechanisms, it is usually the other way around."],
["Edsger Dijkstra","CACM","Lisp has jokingly been called \"the most intelligent way to misuse a computer\". I think that description is a great compliment because it transmits the full flavor of liberation: it has assisted a number of our most gifted fellow humans in thinking previously impossible thoughts."],
["Edsger Dijkstra","","Why has elegance found so little following? Elegance has the disadvantage that hard work is needed to achieve it and a good education to appreciate it."],
["Edsger Dijkstra","","The question of whether computers can think is like the question of whether submarines can swim."],
["Edsger Dijkstra","1972 Turing award lecture","In their capacity as a tool, computers will be but a ripple on the surface of our culture. In their capacity as intellectual challenge, they are without precedent in the cultural history of mankind."],
["Edsger Dijkstra","","If we wish to count lines of code, we should not regard them as 'lines produced' but as 'lines spent'."],
["Edsger Dijkstra","","The required techniques of effective reasoning are pretty formal, but as long as programming is done by people that don't master them, the software crisis will remain with us and will be considered an incurable disease. And you know what incurable diseases do: they invite the quacks and charlatans in, who in this case take the form of Software Engineering gurus."],
["Edsger Dijkstra","","Always design your program as a member of a whole family of programs, including those that are likely to succeed it."],
["Edsger Dijkstra","","A programming language is a tool that has a profound influence on our thinking habits."],
["Edsger Dijkstra","","I pray daily that more of my fellow programmers may find the means of freeing themselves from the curse of compatibility."],
["Edsger Dijkstra","","PL/I, 'the fatal disease', belongs more to the problem set than to the solution set."],
["Edsger Dijkstra","","Programming is one of the most difficult branches of applied mathematics; the poorer mathematicians had better remain pure mathematicians."],
["Martin Fowler","Refactoring: Improving the Design of Existing Code","Refactoring changes the program in small steps. If you make a mistake, it is easy to find the bug."],
["Martin Fowler","Refactoring: Improving the Design of Existing Code","When you feel the need to write a comment, first try to refactor the code so that any comment becomes superflouus."],
["Martin Fowler","","One of the things I've been trying to do is look for simpler or rules underpinning good or bad design. I think one of the most valuable rules is avoid duplication. \"Once and only once\" is the Extreme Programming phrase."],
["Martin Fowler","","People also underestimate the time they spend debugging. They underestimate how much time they can spend chasing a long bug. With testing, I know straight away when I added a bug. That lets me fix the bug immediately, before it can crawl off and hide. There are few things more frustrating or time wasting than debugging. Wouldn't it be a hell of a lot quicker if we just didn't create the bugs in the first place?"],
["Martin Fowler","","When you actually sit down to write some code, you learn things that you didn’t get from thinking about them in modeling terms…there is a feedback process there that you can only really get at from executing some things and seeing what works"],
["Martin Fowler","","Another design principle that's struck me very firmly, particularly recently, is making things explicit. Make the code very explicitly say things...A dictionary is not explicit. A class, even though you have to do all the work writing in the member variables and accessors, is explicit. You can just look at that source code and know what data is present."],
["Martin Fowler","","..You can almost do this as an exercise. Look at some program and see if there's some duplication. Then, without really thinking about what it is you're trying to achieve, just pigheadedly try to remove that duplication. Time and time again, I've found that by simply removing duplication I accidentally stumble onto a really nice elegant pattern. It's quite remarkable how often that is the case. I often find that a nice design can come from just being really anal about getting rid of duplicated code."],
["Martin Fowler","","I think another good principle is separating presentation or user interface (UI) from the real essence of what your app is about. By following that principle I have gotten lucky with changes time and time again. So I think that's a good principle to follow."],
["Martin Fowler","from Is Design Dead?","Don't worry about design, if you listen to your code a good design will appear...Listen to the technical people. If they are complaining about the difficulty of making changes, then take such complaints seriously and give them time to fix things."],
["Martin Fowler","","I wrote that about aesthetics in discussing when you apply refactorings. To some extent, the situations I describe in the refactoring guidelines are fairly vague notions of aesthetics. But I try to provide more guidance than just saying, \"Refactor when the code looks ugly.\" I say, for instance, that duplicated code is a bad smell. I say that long methods are a bad smell. Big classes are a bad smell."],
["Martin Fowler","","Refactoring improves the design. What is the business case of good design? To me, it's that you can make changes to the software more easily in the future. Refactoring is about saying, \"Let's restructure this system in order to make it easier to change it.\" The corollary is that it's pointless to refactor a system you will never change, because you'll never get a payback. But if you will be changing the system‹either to fix bugs or add features‹keeping the system well factored or making it better factored will give you a payback as you make those changes."],
["Martin Fowler","","Why is composing symphonies tough? I don't know. It's just very few people in the world can do it well. And I think that's the case with upfront design. It is very hard to do well."],
["Martin Fowler","","...if you're afraid to change something it is clearly poorly designed."],
["Martin Fowler","Refactoring: Improving the Design of Existing Code","Any fool can write code that a computer can understand. Good programmers write code that humans can understand."],
["Martin Fowler","","I can’t choose whether someone is offended by my actions. I can choose whether I care."],
["Niklaus Wirth","From an interview in Software Development","I remember a long discussion in an academic seminar in the mid-1970s, when the term 'software crisis' was in full swing and the notion of correctness proofs of programs was put forward as a possible remedy. Professor C.A.R. [Tony] Hoare, the speaker at the seminar, had eloquently presented the principles and the advantages of correctness proofs replacing testing. After a long discussion about the pros and cons, Jim Morris got up and disarmingly asked: 'But Tony, what is your answer if we frankly confess that we dearly love debugging? Do you want us to abandon our most cherished enjoyment?'"],
["Niklaus Wirth","From an interview in Software Development","'Good enough software' is rarely good enough. It is a sad manifestation of the spirit of modern times, in which an individual's pride in his or her work has become rare."],
["Niklaus Wirth","","We know of much better ways to design software than is common practice, but they are rarely followed. I know of a particular, very large software producer that explicitly assumes that design takes 20% of developers' time, and debugging takes 80%. However, advocates of an 80% design time vs. 20% debugging time ratio have not only proven that their ratio is realistic, but also that it would improve the company's tarnished image."],
["Niklaus Wirth","","Professors typically spend their time in meetings about planning, policy, proposals, fund-raising, consulting, interviewing, traveling, and so forth, but spend relatively little time at their drawing boards. As a result, they lose touch with the substance of their rapidly developing subject. They lose the ability to design; they lose sight of what is essential; and they resign themselves to teach academically challenging puzzles."],
["Niklaus Wirth","","The woes of software engineering are not due to lack of tools or proper management, but largely due to lack of sufficient technical competence. A good designer must rely on experience; on precise, logical thinking; and on pedantic exactness. No magic will do. In light of all this, it is particularly sad that, in many informatics curricula, programming in the large is badly neglected. Design has become a non-topic."],
["Niklaus Wirth","","After more than 30 years of programming, we ought to know that the design of complex software is inherently difficult."],
["Niklaus Wirth","","We must be careful with terms like readable, user-friendly, and so forth. They are vague at best, and often refer to taste and established habits. But what is conventional need not also be convenient. In the context of programming languages, perhaps \"readable\" should be replaced by \"amenable to formal reasoning.\" For example, mathematical formulas are hardly what we might praise as easily readable, but they allow the formal derivation of properties that could not be obtained from a vague, fuzzy, informal, user-friendly circumscription."],
["Niklaus Wirth","","The wealth of features of many languages is indeed a problem rather than a solution. A multitude of features is another consequence of the programmers' belief that the value of a language is proportional to the quantity of its features and facilities, bells, and whistles. However, we know that it is better if each basic concept is represented by a single, designated language construct. Not only does this reduce the effort of learning, but it reduces the volume of the language's description, and thereby the possibilities of inconsistency and of misunderstanding. Keeping a language as simple and as regular as possible has always been a guideline in my work; the description of Pascal took some 50 pages, Modula took 40, and Oberon took a mere 16. This I still consider to have been genuine progress."],
["Donald E. Knuth","Computer Programming as an Art. Turing Award Speech 1974","When I speak about computer programming as an art, I am thinking primarily of it as an art form, in an aesthetic sense. The chief goal of my work as an educator and author is to help people learn how to write beautiful programs...My feeling is that when we prepare a program, the experience can be just like composing poetry or music...Some programs are elegant, some are exquisite, some are sparkling. My claim is that it is possible to write grand programs, noble programs, truly magnificent ones!... computer programming is an art, because it applies accumulated knowledge to the world, because it requires skill and ingenuity, and especially because it produces objects of beauty. Programmers who subconsciously view themselves as artists will enjoy what they do and will do it better."],
["Donald E. Knuth","","I get into the meanest, nastiest frame of mind I can manage, and I write the nastiest (testing) code I can think of. Then I turn around and embed that in even nastier constructions that are nearly obscene."],
["Donald E. Knuth","","Let us change our traditional attitude to the construction of programs. Instead of imagining that our main task is to instruct a computer what to to, let us concentrate rather on explaining to human beings what we want a computer to do."],
["Donald E. Knuth","","You're bound to be unhappy if you optimize everything."],
["Donald E. Knuth","","The process of preparing programs for a digital computer is especially attractive, not only because it can be economically and scientifically rewarding, but also because it can be an aesthetic experience much like composing poetry or music."],
["Donald E. Knuth","","Any inaccuracies in this index may be explained by the fact that it has been sorted with the help of a computer."],
["Donald E. Knuth","","The first thing I would say is that when you write a program, think of it primarily as a work of literature. You're trying to write something that human beings are going to read. Don't think of it primarily as something a computer is going to follow. The more effective you are at making your program readable, the more effective it's going to be: You'll understand it today, you'll understand it next week, and your successors who are going to maintain and modify it will understand it."],
["Donald E. Knuth","","...in fact what I would like to see is thousands of computer scientists let loose to do whatever they want. That's what really advances the field."],
["Donald E. Knuth","Tex","Computers are good at following instructions, but not at reading your mind."],
["Donald E. Knuth","","The designer of a new kind of system must participate fully in the implementation."],
["Donald E. Knuth","","... the designer of a new system must not only be the implementor and the first large-scale user; the designer should also write the first user manual. ... If I had not participated fully in all these activities, literally hundreds of improvements would never have been made, because I would never have thought of them or perceived why they were important."],
["Donald E. Knuth","","Beware of bugs in the above code; I have only proved it correct, not tried it."],
["Donald E. Knuth","","The psychological profile [of a programmer] is mostly the ability to shift levels of abstraction, from low level to high level. To see something in the small and to see something in the large. When you're writing a program, you're saying, \"Add one to the counter,\" but you know why you're adding one to the counter. You can step back and see a picture of the way a process is moving. Computer scientists see things simultaneously at the low level and the high level."],
["Donald E. Knuth","","Debugging is an art that needs much further study. The most effective debugging techniques seem to be those which are designed and built in to the program itself. Another good debugging practice is to keep a record of every mistake that is made. Even though this will probably be quite embarrassing, such information is invaluable to anyone doing research on the debugging problem, and it will also help you learn how to reduce the number of future errors."],
["Donald E. Knuth","","We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. "],
["Donald E. Knuth","","The most effective debugging techniques seem to be those which are designed and built into the program itself."],
["Donald E. Knuth","","Any inaccuracies in this index may be explained by the fact that it has been sorted with the help of a computer."],
["Donald E. Knuth","","The most important thing in the programming language is the name. A language will not succeed without a good name. I have recently invented a very good name and now I am looking for a suitable language."],
["Donald E. Knuth","","When using WYSIWYG systems, What You See Is All You'll Ever Get."],
["Donald E. Knuth","The Errors of Tex","I am pleased to see that TeX actually kept getting simpler as it kept growing, because the new features blended with the old ones. I was constantly bombarded by ideas for extensions, and I was constantly turning a deaf ear to everything that did not fit well with TeX as I conceived it at the time. Thus TeX converged, rather than diverged, to its final form. By acting as an extremely conservative filter, and by believing that the system was always complete, I was perhaps able to save TeX from the 'creeping featurism' that destroys systems whose users are allowed to introduce a patchwork of loosely connected ideas."],
["Donald E. Knuth","","The hardest thing is to go to sleep at night, when there are so many urgent things needing to be done. A huge gap exists between what we know is possible with today's machines and what we have so far been able to finish."],
["Donald E. Knuth","Writing Solid Code: Microsoft's Techniques for Developing Bug-Free C Programs","I believe that the final bug in TeX was discovered and removed on November 27, 1985. But if, somehow, an error still lurks in the code, I shall gladly pay a finder's fee of $20.48 to the first person who discovers it. (This is twice the previous amount, and I plan to double it again in a year; you see, I really am confident!)"],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","The hardest single part of building a software system is deciding precisely what to build."],
["Frederick P. Brooks","No Silver Bullet","Software entities are more complex for their size than perhaps any other human construct, because no two parts are alike (at least above the statement level). If they are, we make the two similar parts into one, a subroutine, open or closed. In this respect software systems differ profoundly from computers, buildings, or automobiles, where repeated elements abound."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","When a task cannot be partitioned because of sequential constraints, the application of more effort has no effect on the schedule. The bearing of a child takes nine months, no matter how many women are assigned. Many software tasks have this characteristic because of the sequential nature of debugging."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","Conceptual integrity is the most important consideration in system design."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","No scene from prehistory is quite so vivid as that of the mortal struggles of great beasts in tar pits. In the mind's eye one sees dinosaurs, mammoths, and saberteeth tigers struggling against the grip of the tar. The fiercer the struggle, the more entangling the tar, and no beast is so strong or so skillful but that he ultimately sinks. Large-system programming has over the past decade been such a tar pit, and many great and powerful beasts have thrashed violently in it. Most have emerged with working systems - few have met goals, schedules, and budgets. Large and small, massive or wiry, team after team has become entangled in the tar. No one thing seems to cause the difficulty - any particular paw can be pulled away. But the accumulation of simultaneous and interacting factors brings slower and slower motion. Everyone seems to have been surprised by the stickiness of the problem, and it is hard to discern the nature of it. But we must try to understand it if we are to solve it."],
["Frederick P. Brooks","Quoted in More Programming Pearls","Good judgement comes from experience, and experience comes from bad judgement."],
["Frederick P. Brooks","No Silver Bullet","The scaling-up of a software entity is not merely a repetition of the same elements on a larger size; it is necessarily an increase in the number of different elements. In most cases, the elements interact with each other in some nonlinear fashion, and the complexity of the whole increases much more than linearly."],
["Frederick P. Brooks","No Silver Bullet","There is no silver bullet."],
["Frederick P. Brooks","","..well over half of the time you spend working on a project (on the order of 70 percent) is spent thinking, and no tool, no matter how advanced, can think for you. Consequently, even if a tool did everything except the thinking for you -- if it wrote 100 percent of the code, wrote 100 percent of the documentation, did 100 percent of the testing, burned the CD-ROMs, put them in boxes, and mailed them to your customers -- the best you could hope for would be a 30 percent improvement in productivity. In order to do better than that, you have to change the way you think."],
["Frederick P. Brooks","No Silver Bullet","he hardest part of the software task is arriving at a complete and consistent specification, and much of the essence of building a program is in fact the debugging of the specification."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","...the organization chart will initially reflect the first system design, which is almost surely not the right one [...] as one learns, he changes the design [...]. Management structures also need to be changed as the system changes..."],
["Frederick P. Brooks","No silver bullet","A little retrospection shows that although many fine, useful software systems have been designed by committees and built as part of multipart projects, those software systems that have excited passionate fans are those that are the products of one or a few designing minds, great designers."],
["Frederick P. Brooks","No silver bullet","The complexity of software is an essential property, not an accidental one. Hence, descriptions of a software entity that abstract away its complexity often abstracts away its essence."],
["Frederick P. Brooks","No silver bullet","Great designs come from great designers."],
["Frederick P. Brooks","No silver bullet","The differences are not minor – they are rather like the differences between Salieri and Mozart. Study after study shows that the very best designers produce structures that are faster, smaller, simpler, clearer, and produced with less effort."],
["Frederick P. Brooks","Code Complete: A Practical Handbook of Software Construction","The programmer's primary weapon in the never-ending battle against slow system is to change the intramodular structure. Our first response should be to reorganize the modules' data structures."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","How does a project get to be a year late? One day at a time."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","The second-system effect has another manifestation somewhat different from pure functional embellishment. That is the tendency to refine techniques whose very existence has been made obsolete by changes in basic system assumptions."],
["Frederick P. Brooks","You won't get it right the first time anyway!","Plan to throw one away. You will do that, anyway. Your only choice is whether to try to sell the throwaway to customers."],
["Frederick P. Brooks","","Scientists build to learn; Engineers learn to build."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","I will contend that conceptual integrity is the most important consideration in system design. It is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have one that contains many good but independent and uncoordinated ideas."],
["Frederick P. Brooks","No Silver Bullet","Software people are not alone in facing complexity. Physics deals with terribly complex objects even at the \"fundamental\" particle level. The physicist labors on, however, in a firm faith that there are unifying principles to be found, whether in quarks or in unified field theories. Einstein repeatedly argued that there must be simplified explanations of nature, because God is not capricious or arbitrary. No such faith comforts the software engineer. Much of the complexity he must master is arbitrary complexity, forced without rhyme or reason by the many human institutions and systems to which his interfaces must conform. These differ from interface to interface, and from time to time, not because of necessity but only because they were designed by different people, rather than by God. In many cases the software must confirm because it has most recently come to the scene. In others it must conform because it is perceived as the most conformable. But in all cases, much complexity comes from conformation with other interfaces; this cannot be simplified out by any redesign of the software alone."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","Failure to allow enough time for system test, in particular, is peculiarly disastrous. Since the delay comes at the end of the schedule, no one is aware of schedule trouble until almost the delivery date. Bad news, late and without warning, is unsettling to customers and to managers. Furthermore, delay at this point has unusually severe financial, as well as psychological, repercussions. The project is fully staffed, and cost-per-day is maximum. More seriously, the software is to support other business effort (shipping of computers, operation of new facilities, etc.) and the secondary costs of delaying these are very high, for it is almost time for software shipment. Indeed, these secondary costs may far outweigh all others."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","Adding manpower to a late software project makes it later."],
["Frederick P. Brooks","","Successful software always gets changed."],
["Frederick P. Brooks","No Silver Bullet","All successful software gets changed. Two processes are at work. As a software product is found to be useful, people try it in new cases at the edge of, or beyond, the original domain. The pressures for extended function come chiefly from users who like the basic function and invent new uses for it. Second, successful software also survives beyond the normal life of the machine vehicle for which it was written. If not new computers, then at least new disks, new displays, new printers come along; and the software must be conformed to its new vehicles of opportunity. "],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","All repairs tend to destroy the structure, to increase the entropy and disorder of the system. Less and less effort is spent on fixing the original design flaws; more and more is spent on fixing flaws introduced by earlier fixes. As time passes, the system becomes less and less well-ordered. Sooner or later the fixing ceases to gain any ground. Each forward step is matched by a backward one. Although in principle usable forever, the system has worn out as a base for progress."],
["Frederick P. Brooks","","All programmers are optimists. Perhaps this modern sorcery especially attracts those who believe in happy endings and fairy godmothers. Perhaps the hundreds of nitty frustrations drive away all but those who habitually focus on the end goal. Perhaps it is merely that computers are young, programmers are younger, and the young are always optimists. But however the selection process works, the result is indisputable: 'This time it will surely run' or 'I just found the last bug'."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","The fundamental problem with software maintenance is that fixing a defect has a substantial (20-50 percent) chance of introducing another. So the whole process is two steps forward and one step back. Why aren't defects fixed more cleanly? First, even a subtle defect shows itself as a local failure of some kind. In fact it often has system-wide ramifications, usually nonobvious. Any attempt to fix it with minimum effort will repair the local and obvious, but unless the structure is pure or the documentation very fine, the far-reaching effects of the repair will be overlooked. Second, the repairer is usually not the man who wrote the code, and often he is a junior programmer or trainee."],
["Frederick P. Brooks","The Mythical Man-Month: Essays on Software Engineering","For picking the milestones there is only one relevant rule. Milestones must be concrete, specific, measurable events, defined with knife-edge sharpness. Coding, for a counterexample, is \"90 percent finished\" for half of the total coding time. Debugging is \"99 percent complete\" most of the time. \"Planning complete\" is an event one can proclaim almost at will."],
["Xerox Computers","Fortran manual","The primary purpose of the DATA statement is to give names to constants; instead of referring to pi as 3.141592653589793 at every appearance, the variable PI can be given that value with a DATA statement and used instead of the longer form of the constant. This also simplifies modifying the program, should the value of PI change."] 
]
